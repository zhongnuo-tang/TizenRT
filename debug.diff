diff --git a/os/kernel/init/os_start.c b/os/kernel/init/os_start.c
index 299ca856f..8c9177098 100644
--- a/os/kernel/init/os_start.c
+++ b/os/kernel/init/os_start.c
@@ -426,7 +426,9 @@ void os_start(void)
 	int i;
 
 	slldbg("Entry\n");
-
+	for (int i = 0; i < 1<<24; i++){
+		asm("nop");
+	}
 	g_os_initstate = OSINIT_BOOT;
 
 	/* Initialize RTOS Data ************************************************** */
@@ -655,14 +657,14 @@ void os_start(void)
 	g_lastpid = CONFIG_SMP_NCPUS - 1;
 
 	/* Fill the stack information to Idle task's tcb */
-lldbg("595\n");
-DelayMs(10);
 	g_idletcb[0].cmn.adj_stack_size = CONFIG_IDLETHREAD_STACKSIZE;
 	g_idletcb[0].cmn.stack_alloc_ptr = (void *)(g_idle_topstack - CONFIG_IDLETHREAD_STACKSIZE);
 	g_idletcb[0].cmn.adj_stack_ptr = (void *)(g_idle_topstack - 4);
-lldbg("596\n");
-DelayMs(10);
 	DEBUGASSERT(up_getsp() >= (uint32_t)g_idletcb[0].cmn.stack_alloc_ptr && up_getsp() <= (uint32_t)g_idletcb[0].cmn.adj_stack_ptr);
+	lldbg("g_idle_topstack %x\n",g_idle_topstack);
+	lldbg("g_idletcb[0].cmn.adj_stack_size %d\n",g_idletcb[0].cmn.adj_stack_size);
+	lldbg("g_idletcb[0].cmn.stack_alloc_ptr %x\n",g_idletcb[0].cmn.stack_alloc_ptr);
+	lldbg("g_idletcb[0].cmn.adj_stack_ptr %x\n",g_idletcb[0].cmn.adj_stack_ptr);
 
 	/* The memory manager is available */
 
@@ -716,7 +718,7 @@ DelayMs(10);
 	if (clock_initialize != NULL)
 #endif
 	{
-		// clock_initialize();
+		clock_initialize();
 	}
 #ifndef CONFIG_DISABLE_POSIX_TIMERS
 #ifdef CONFIG_HAVE_WEAKFUNCTIONS
@@ -821,7 +823,6 @@ lldbg("18\n");
 		if (i > 0)
 		{
 			/* Clone stdout, stderr, stdin from the CPU0 IDLE task. */
-lldbg("19\n");
 
 			DEBUGVERIFY(group_setuptaskfiles(&g_idletcb[i]));
 		}
@@ -907,7 +908,6 @@ lldbg("22\n");
 		pm_idle();
 #endif
 		/* Perform any processor-specific idle state operations */
-lldbg("23\n");
 
 		up_idle();
 	}
diff --git a/os/kernel/sched/sched_addreadytorun.c b/os/kernel/sched/sched_addreadytorun.c
index a133be867..ffd2aeaab 100644
--- a/os/kernel/sched/sched_addreadytorun.c
+++ b/os/kernel/sched/sched_addreadytorun.c
@@ -122,7 +122,7 @@ bool sched_addreadytorun(FAR struct tcb_s *btcb)
 {
 	FAR struct tcb_s *rtcb = this_task();
 	bool ret;
-
+	lldbg("rtcb %x\n", *rtcb);
 #ifdef CONFIG_SW_STACK_OVERFLOW_DETECTION
 	sched_checkstackoverflow(rtcb);
 #endif
diff --git a/os/kernel/task/task_create.c b/os/kernel/task/task_create.c
index bf260df72..dde2bb58b 100644
--- a/os/kernel/task/task_create.c
+++ b/os/kernel/task/task_create.c
@@ -135,6 +135,7 @@ static int thread_create(FAR const char *name, uint8_t ttype, int priority, int
 	pid_t pid;
 	int errcode;
 	int ret;
+	lldbg("enter\n");
 
 	/* Check whether we are allowed to create new task ? */
 	if (g_alive_taskcount == CONFIG_MAX_TASKS) {
